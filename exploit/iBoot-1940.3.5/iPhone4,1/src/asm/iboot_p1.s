@ iboot_p1.s
@
@ Copyright (c) 2021 - 2023 @ kok3shidoll
@
@


    .text
    .syntax    unified


    .arm
_entry:
    b    _entry


    .org    0x208e8
    .thumb
    .thumb_func
_get_current_task:
    bx    lr


    .org    0x21cb8
    .thumb_func
_arch_cpu_quiesce:
    bx    lr


    .org    0x24c90
    .thumb
    .thumb_func
_decompress_lzss:
    bx    lr


    .org    0x3368c
    .arm
_bcopy:
    bx    lr


    .org    0x340d8
    .thumb
    .thumb_func
_disable_interrupts:
    bx    lr


    .org    0x46A20
    .thumb
    .thumb_func
_iboot_patch:
    ldr    r0, =0x9FF46A32          @ end point of _iboot_patch()
    ldr    r1, =0x84042300          @ payload
    movs   r2, #0x44                @ payload_sz
    blx    _bcopy

    ldr    r0, =0xc04               @ main_task() ptr
    ldr    r1, =(0x9ff42300 + 1)    @ payload_base
    str    r1, [r4, r0]

    b.n     _payload2


    .org    0x46D48
    .global _payload
    .thumb
    .thumb_func
_payload:
    ldr    sp, =0x9FFF8000
    bl     _disable_interrupts
    ldr    r4, =0x84000000

    ldr    r0, =0x9ff00000          @ could be 0, but we use explicit offset for iloader
    mov    r1, r4
    ldr    r2, =0x43880
    blx    _bcopy

    b.n    _iboot_patch

.align    2


    .org    0x46D72
    .thumb
    .thumb_func
_payload2:
    @ accept unsigned images
    ldr    r0, =0x1a328
    ldr    r1, =0x60182000
    str    r1, [r4, r0]
    bl     _get_current_task
    movs   r1, #0
    str    r1, [r0, #0x44]

    ldr    r0, =0x9ff47000          @ dst
    movs   r1, #0xfc                @ dst_sz
    ldr    r2, =0x9ff46bfc          @ nettoyeur
    movs   r3, #0xe6                @ nettoyeur_sz may be 0xe1

    mov    r5, r0
    bl     _decompress_lzss

    ldr    r0, =(9ff01740 + 1)
    blx    r0
    bl     _arch_cpu_quiesce
    blx    r5                       @ nettoyeur()
    bx     r4

.align    2
